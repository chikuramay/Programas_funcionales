def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Pattern == Genome[i:i+len(Pattern)]:
            positions.append(i)
   
    return positions
#----------------------------------------------------------------------------------
def SymbolArray(Genome, symbol):
    array = {}
    n = len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]
    for i in range(n):
        array[i] = PatternCount(symbol, ExtendedGenome[i:i+(n//2)])
    return array
#----------------------------------------------------------------------------------
def FasterSymbolArray(Genome, symbol):
    array = {}
    n= len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]
    array[0] = PatternCount(symbol, Genome[0:n//2])
    
    for i in range(1, n):
        array[i] = array[i - 1]        
        if ExtendedGenome[i - 1] == symbol:
            array[i] = array[i] - 1
        if ExtendedGenome[i + (n//2) - 1] == symbol:
            array[i] = array[i] + 1
    return array
#----------------------------------------------------------------------------------
def PatternCount(symbol, Genome):
    count = 0 # output variable
    k = len(symbol)
    n = len(Genome)
    for i in range(n - k + 1):
        if symbol[i:i+k] == Genome:
            count += 1
    return Genome.count(symbol)
Genome = "AAAAGGGG"
Text = "A"
